# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null >/dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* *
	fi
}

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Get gzipped file size
function gz() {
	echo "orig size (bytes): "
	cat "$1" | wc -c
	echo "gzipped size (bytes): "
	gzip -c "$1" | wc -c
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<<"$*" | pygmentize -l javascript
	else # pipe
		python -mjson.tool | pygmentize -l javascript
	fi
}

# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	echo # newline
}

# Get a characterâ€™s Unicode code point
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
	echo # newline
}

# Check which service is running on a given port
function checkport() {
	lsof -Pan -i tcp -i udp | grep ":$1"
}

# Show amount of free space on / in percent
function free_space() {
	USEDPERC=$(df -h | grep \ /$ | tr -s ' ' ':' | cut -d ':' -f 5 | tr -d '%')
	echo $((100 - $USEDPERC))'%'
}

check_process() {
	echo "$ts: checking $1"
	[ "$1" = "" ] && return 0
	[ $(pgrep -n $1) ] && return 1 || return 0
}

# find shorthand
function f() {
	find . -name "$1"
}

# a better kill -9
function kill-9() {
	kill -9 $1 && aplay ~/.sounds/kill-9.wav 1 &>/dev/null
}

# docker-bash <container>
function docker-bash() {
	docker exec -i -t $1 /bin/bash
}

# generate a QR code from a given text
# usage:
# qr http://example.com
function qr() {
	echo $1 | curl -F-=\<- qrenco.de
}

# sync a forked github repo with the original
function git-sync-fork() {
	git fetch upstream
	git checkout master
	git merge upstream/master
	git push origin
}

# new-ssh-key <name> <comment>
function new-ssh-key() {
	private_key_file="$HOME/.ssh/$1.ed25519"
	# echo $private_key_file
	ssh-keygen -t ed25519 -a 420 -f $private_key_file -C "$2"
	eval "$(ssh-agent -s)"
	ssh-add "$private_key_file"
	pbcopy <"$private_key_file.pub"
	echo "copied public key to clipboard"
}
